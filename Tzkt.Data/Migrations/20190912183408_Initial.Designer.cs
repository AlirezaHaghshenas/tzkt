// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tzkt.Data;
using Tzkt.Data.Models;

namespace Tzkt.Data.Migrations
{
    [DbContext(typeof(TzktContext))]
    [Migration("20190912183408_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.SerialColumn)
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Tzkt.Data.Models.ActivationOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccountId");

                    b.Property<long>("Balance");

                    b.Property<int>("Level");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.ToTable("ActivationOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.AppState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Hash");

                    b.Property<int>("Level");

                    b.Property<string>("Protocol");

                    b.Property<bool>("Synced");

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.ToTable("AppState");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Hash = "",
                            Level = -1,
                            Protocol = "",
                            Synced = false,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Tzkt.Data.Models.BakerCycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("AccusationLostDeposit");

                    b.Property<long>("AccusationLostFee");

                    b.Property<long>("AccusationLostReward");

                    b.Property<long>("AccusationReward");

                    b.Property<int>("BakerId");

                    b.Property<long>("Balance");

                    b.Property<int>("Blocks");

                    b.Property<int>("BlocksExtra");

                    b.Property<int>("BlocksMissed");

                    b.Property<long>("BlocksReward");

                    b.Property<int>("Cycle");

                    b.Property<int>("Endorsements");

                    b.Property<int>("EndorsementsMissed");

                    b.Property<long>("EndorsementsReward");

                    b.Property<long>("FeesReward");

                    b.Property<long>("RevelationLostFee");

                    b.Property<long>("RevelationLostReward");

                    b.Property<long>("RevelationReward");

                    b.Property<long>("StakingBalance");

                    b.HasKey("Id");

                    b.HasIndex("BakerId");

                    b.ToTable("BakerCycles");
                });

            modelBuilder.Entity("Tzkt.Data.Models.BakingRight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BakerId");

                    b.Property<int>("Level");

                    b.Property<int>("Priority");

                    b.HasKey("Id");

                    b.HasIndex("BakerId");

                    b.ToTable("BakingRights");
                });

            modelBuilder.Entity("Tzkt.Data.Models.BalanceSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Balance");

                    b.Property<int>("ContractId");

                    b.Property<int>("DelegateId");

                    b.Property<int>("Level");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.HasIndex("DelegateId");

                    b.ToTable("BalanceSnapshots");
                });

            modelBuilder.Entity("Tzkt.Data.Models.BallotOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Level");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<int>("PeriodId");

                    b.Property<int>("ProposalId");

                    b.Property<int>("SenderId");

                    b.Property<DateTime>("Timestamp");

                    b.Property<int>("Vote");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ProposalId");

                    b.HasIndex("SenderId");

                    b.ToTable("BallotOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("BakerId");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<int>("Level");

                    b.Property<int>("Operations");

                    b.Property<int>("OperationsMask");

                    b.Property<int>("Priority");

                    b.Property<int>("ProtocolId");

                    b.Property<int?>("RevelationId");

                    b.Property<DateTime>("Timestamp");

                    b.Property<int>("Validations");

                    b.HasKey("Id");

                    b.HasIndex("BakerId");

                    b.HasIndex("Hash")
                        .IsUnique();

                    b.HasIndex("Level")
                        .IsUnique();

                    b.HasIndex("ProtocolId");

                    b.HasIndex("RevelationId")
                        .IsUnique();

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Address")
                        .IsRequired()
                        .IsFixedLength(true)
                        .HasMaxLength(36);

                    b.Property<long>("Balance");

                    b.Property<long>("Counter");

                    b.Property<bool>("Delegatable");

                    b.Property<int?>("DelegateId");

                    b.Property<int>("DelegatorsCount");

                    b.Property<long>("Frozen");

                    b.Property<int>("Kind");

                    b.Property<int?>("ManagerId");

                    b.Property<int>("Operations");

                    b.Property<int>("OperationsMask");

                    b.Property<string>("PublicKey")
                        .HasMaxLength(65);

                    b.Property<bool>("Spendable");

                    b.Property<bool>("Staked");

                    b.Property<long>("StakingBalance");

                    b.HasKey("Id");

                    b.HasAlternateKey("Address");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.HasIndex("DelegateId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("ManagerId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Cycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ActiveBakers");

                    b.Property<int>("ActiveDelegators");

                    b.Property<int>("Index");

                    b.Property<int>("Snapshot");

                    b.Property<long>("TotalBalances");

                    b.Property<int>("TotalRolls");

                    b.HasKey("Id");

                    b.ToTable("Cycles");
                });

            modelBuilder.Entity("Tzkt.Data.Models.DelegationOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Counter");

                    b.Property<int?>("DelegateId");

                    b.Property<long>("Fee");

                    b.Property<int>("Level");

                    b.Property<int?>("Nonce");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<int?>("ParentId");

                    b.Property<int>("SenderId");

                    b.Property<byte>("Status");

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("DelegateId");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("ParentId");

                    b.HasIndex("SenderId");

                    b.ToTable("DelegationOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.DelegatorSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BakerId");

                    b.Property<long>("Balance");

                    b.Property<int>("Cycle");

                    b.Property<int>("DelegatorId");

                    b.HasKey("Id");

                    b.HasIndex("BakerId");

                    b.HasIndex("DelegatorId");

                    b.ToTable("DelegatorSnapshots");
                });

            modelBuilder.Entity("Tzkt.Data.Models.DoubleBakingOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccusedLevel");

                    b.Property<int>("AccuserId");

                    b.Property<long>("AccuserReward");

                    b.Property<int>("Level");

                    b.Property<int>("OffenderId");

                    b.Property<long>("OffenderLoss");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("AccuserId");

                    b.HasIndex("Level");

                    b.HasIndex("OffenderId");

                    b.HasIndex("OpHash");

                    b.ToTable("DoubleBakingOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.DoubleEndorsingOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccusedLevel");

                    b.Property<int>("AccuserId");

                    b.Property<long>("AccuserReward");

                    b.Property<int>("Level");

                    b.Property<int>("OffenderId");

                    b.Property<long>("OffenderLoss");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("AccuserId");

                    b.HasIndex("Level");

                    b.HasIndex("OffenderId");

                    b.HasIndex("OpHash");

                    b.ToTable("DoubleEndorsingOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.EndorsementOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("DelegateId");

                    b.Property<int>("Level");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<long>("Reward");

                    b.Property<int>("Slots");

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("DelegateId");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.ToTable("EndorsementOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.EndorsingRight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BakerId");

                    b.Property<int>("Level");

                    b.Property<int>("Slots");

                    b.HasKey("Id");

                    b.HasIndex("BakerId");

                    b.ToTable("EndorsingRights");
                });

            modelBuilder.Entity("Tzkt.Data.Models.NonceRevelationOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("BakerId");

                    b.Property<int>("Level");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<int>("RevelationLevel");

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("BakerId");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("RevelationLevel");

                    b.ToTable("NonceRevelationOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.OriginationOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Balance");

                    b.Property<int>("ContractId");

                    b.Property<int>("Counter");

                    b.Property<bool>("Delegatable");

                    b.Property<int?>("DelegateId");

                    b.Property<long>("Fee");

                    b.Property<int>("Level");

                    b.Property<int>("ManagerId");

                    b.Property<int?>("Nonce");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<int?>("ParentId");

                    b.Property<int>("SenderId");

                    b.Property<bool>("Spendable");

                    b.Property<byte>("Status");

                    b.Property<long>("StorageFee");

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.HasIndex("DelegateId");

                    b.HasIndex("Level");

                    b.HasIndex("ManagerId");

                    b.HasIndex("OpHash");

                    b.HasIndex("ParentId");

                    b.HasIndex("SenderId");

                    b.ToTable("OriginationOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ExplorationPeriodId");

                    b.Property<string>("Hash")
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<int>("InitiatorId");

                    b.Property<int?>("PromotionPeriodId");

                    b.Property<int>("ProposalPeriodId");

                    b.Property<int>("Status");

                    b.Property<int?>("TestingPeriodId");

                    b.HasKey("Id");

                    b.HasIndex("ExplorationPeriodId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("InitiatorId");

                    b.HasIndex("PromotionPeriodId")
                        .IsUnique();

                    b.HasIndex("ProposalPeriodId");

                    b.HasIndex("TestingPeriodId")
                        .IsUnique();

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("Tzkt.Data.Models.ProposalOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Level");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<int>("PeriodId");

                    b.Property<int>("ProposalId");

                    b.Property<int>("SenderId");

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ProposalId");

                    b.HasIndex("SenderId");

                    b.ToTable("ProposalOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Protocol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Hash");

                    b.Property<int>("Weight");

                    b.HasKey("Id");

                    b.ToTable("Protocols");
                });

            modelBuilder.Entity("Tzkt.Data.Models.RevealOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Counter");

                    b.Property<long>("Fee");

                    b.Property<int>("Level");

                    b.Property<int?>("Nonce");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<int?>("ParentId");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasMaxLength(65);

                    b.Property<int>("SenderId");

                    b.Property<byte>("Status");

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("ParentId");

                    b.HasIndex("SenderId");

                    b.ToTable("RevealOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.TransactionOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<long>("Amount");

                    b.Property<int>("Counter");

                    b.Property<long>("Fee");

                    b.Property<int>("Level");

                    b.Property<int?>("Nonce");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<int?>("ParentId");

                    b.Property<int>("SenderId");

                    b.Property<byte>("Status");

                    b.Property<long>("StorageFee");

                    b.Property<bool>("TargetAllocated");

                    b.Property<int>("TargetId");

                    b.Property<DateTime>("Timestamp");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("ParentId");

                    b.HasIndex("SenderId");

                    b.HasIndex("TargetId");

                    b.ToTable("TransactionOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.VotingEpoch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("Level");

                    b.Property<int>("Progress");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("VotingEpoches");
                });

            modelBuilder.Entity("Tzkt.Data.Models.VotingPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("EndLevel");

                    b.Property<int>("EpochId");

                    b.Property<int>("Kind");

                    b.Property<int>("StartLevel");

                    b.HasKey("Id");

                    b.HasIndex("EpochId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("VotingPeriods");

                    b.HasDiscriminator<int>("Kind");
                });

            modelBuilder.Entity("Tzkt.Data.Models.ExplorationPeriod", b =>
                {
                    b.HasBaseType("Tzkt.Data.Models.VotingPeriod");

                    b.Property<int>("Abstainings");

                    b.Property<int>("Approvals");

                    b.Property<int>("Participation");

                    b.Property<int>("ProposalId");

                    b.Property<int>("Quorum");

                    b.Property<int>("Refusals");

                    b.Property<int>("TotalStake");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Tzkt.Data.Models.PromotionPeriod", b =>
                {
                    b.HasBaseType("Tzkt.Data.Models.VotingPeriod");

                    b.Property<int>("Abstainings")
                        .HasColumnName("PromotionPeriod_Abstainings");

                    b.Property<int>("Approvals")
                        .HasColumnName("PromotionPeriod_Approvals");

                    b.Property<int>("Participation")
                        .HasColumnName("PromotionPeriod_Participation");

                    b.Property<int>("ProposalId")
                        .HasColumnName("PromotionPeriod_ProposalId");

                    b.Property<int>("Quorum")
                        .HasColumnName("PromotionPeriod_Quorum");

                    b.Property<int>("Refusals")
                        .HasColumnName("PromotionPeriod_Refusals");

                    b.Property<int>("TotalStake")
                        .HasColumnName("PromotionPeriod_TotalStake");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Tzkt.Data.Models.ProposalPeriod", b =>
                {
                    b.HasBaseType("Tzkt.Data.Models.VotingPeriod");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Tzkt.Data.Models.TestingPeriod", b =>
                {
                    b.HasBaseType("Tzkt.Data.Models.VotingPeriod");

                    b.Property<int>("ProposalId")
                        .HasColumnName("TestingPeriod_ProposalId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Tzkt.Data.Models.ActivationOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Contract", "Account")
                        .WithOne("Activation")
                        .HasForeignKey("Tzkt.Data.Models.ActivationOperation", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Activations")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tzkt.Data.Models.BakerCycle", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Contract", "Baker")
                        .WithMany()
                        .HasForeignKey("BakerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tzkt.Data.Models.BakingRight", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Contract", "Baker")
                        .WithMany()
                        .HasForeignKey("BakerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tzkt.Data.Models.BalanceSnapshot", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.Contract", "Delegate")
                        .WithMany()
                        .HasForeignKey("DelegateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tzkt.Data.Models.BallotOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Ballots")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.VotingPeriod", "Period")
                        .WithMany("Ballots")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.Proposal", "Proposal")
                        .WithMany("Ballots")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.Contract", "Sender")
                        .WithMany("Ballots")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tzkt.Data.Models.Block", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Contract", "Baker")
                        .WithMany("BakedBlocks")
                        .HasForeignKey("BakerId");

                    b.HasOne("Tzkt.Data.Models.Protocol", "Protocol")
                        .WithMany("Blocks")
                        .HasForeignKey("ProtocolId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.NonceRevelationOperation", "Revelation")
                        .WithOne("RevelationBlock")
                        .HasForeignKey("Tzkt.Data.Models.Block", "RevelationId")
                        .HasPrincipalKey("Tzkt.Data.Models.NonceRevelationOperation", "RevelationLevel");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Contract", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Contract", "Delegate")
                        .WithMany("DelegatedContracts")
                        .HasForeignKey("DelegateId");

                    b.HasOne("Tzkt.Data.Models.Contract", "Manager")
                        .WithMany("OriginatedContracts")
                        .HasForeignKey("ManagerId");
                });

            modelBuilder.Entity("Tzkt.Data.Models.DelegationOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Contract", "Delegate")
                        .WithMany("IncomingDelegations")
                        .HasForeignKey("DelegateId");

                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Delegations")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.TransactionOperation", "Parent")
                        .WithMany("InternalDelegations")
                        .HasForeignKey("ParentId");

                    b.HasOne("Tzkt.Data.Models.Contract", "Sender")
                        .WithMany("Delegations")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tzkt.Data.Models.DelegatorSnapshot", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Contract", "Baker")
                        .WithMany()
                        .HasForeignKey("BakerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.Contract", "Delegator")
                        .WithMany()
                        .HasForeignKey("DelegatorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tzkt.Data.Models.DoubleBakingOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Contract", "Accuser")
                        .WithMany("DoubleBakingAccusations")
                        .HasForeignKey("AccuserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("DoubleBakings")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.Contract", "Offender")
                        .WithMany("DoubleBakings")
                        .HasForeignKey("OffenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tzkt.Data.Models.DoubleEndorsingOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Contract", "Accuser")
                        .WithMany("DoubleEndorsingAccusations")
                        .HasForeignKey("AccuserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("DoubleEndorsings")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.Contract", "Offender")
                        .WithMany("DoubleEndorsings")
                        .HasForeignKey("OffenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tzkt.Data.Models.EndorsementOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Contract", "Delegate")
                        .WithMany("Endorsements")
                        .HasForeignKey("DelegateId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Endorsements")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tzkt.Data.Models.EndorsingRight", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Contract", "Baker")
                        .WithMany()
                        .HasForeignKey("BakerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tzkt.Data.Models.NonceRevelationOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Contract", "Baker")
                        .WithMany("Revelations")
                        .HasForeignKey("BakerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Revelations")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tzkt.Data.Models.OriginationOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Contract", "Contract")
                        .WithOne("Origination")
                        .HasForeignKey("Tzkt.Data.Models.OriginationOperation", "ContractId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.Contract", "Delegate")
                        .WithMany("DelegatedOriginations")
                        .HasForeignKey("DelegateId");

                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Originations")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.Contract", "Manager")
                        .WithMany("ManagedOriginations")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.TransactionOperation", "Parent")
                        .WithMany("InternalOriginations")
                        .HasForeignKey("ParentId");

                    b.HasOne("Tzkt.Data.Models.Contract", "Sender")
                        .WithMany("Originations")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tzkt.Data.Models.Proposal", b =>
                {
                    b.HasOne("Tzkt.Data.Models.ExplorationPeriod", "ExplorationPeriod")
                        .WithOne("Proposal")
                        .HasForeignKey("Tzkt.Data.Models.Proposal", "ExplorationPeriodId");

                    b.HasOne("Tzkt.Data.Models.Contract", "Initiator")
                        .WithMany("PushedProposals")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.PromotionPeriod", "PromotionPeriod")
                        .WithOne("Proposal")
                        .HasForeignKey("Tzkt.Data.Models.Proposal", "PromotionPeriodId");

                    b.HasOne("Tzkt.Data.Models.ProposalPeriod", "ProposalPeriod")
                        .WithMany("Candidates")
                        .HasForeignKey("ProposalPeriodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.TestingPeriod", "TestingPeriod")
                        .WithOne("Proposal")
                        .HasForeignKey("Tzkt.Data.Models.Proposal", "TestingPeriodId");
                });

            modelBuilder.Entity("Tzkt.Data.Models.ProposalOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Proposals")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.VotingPeriod", "Period")
                        .WithMany("Proposals")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.Proposal", "Proposal")
                        .WithMany("Proposals")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.Contract", "Sender")
                        .WithMany("Proposals")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tzkt.Data.Models.RevealOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Reveals")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.TransactionOperation", "Parent")
                        .WithMany("InternalReveals")
                        .HasForeignKey("ParentId");

                    b.HasOne("Tzkt.Data.Models.Contract", "Sender")
                        .WithMany("Reveals")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tzkt.Data.Models.TransactionOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Transactions")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.TransactionOperation", "Parent")
                        .WithMany("InternalTransactions")
                        .HasForeignKey("ParentId");

                    b.HasOne("Tzkt.Data.Models.Contract", "Sender")
                        .WithMany("OutgoingTransactions")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Tzkt.Data.Models.Contract", "Target")
                        .WithMany("IncomingTransactions")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Tzkt.Data.Models.VotingPeriod", b =>
                {
                    b.HasOne("Tzkt.Data.Models.VotingEpoch", "Epoch")
                        .WithMany("Periods")
                        .HasForeignKey("EpochId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
