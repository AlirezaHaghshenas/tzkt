// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tzkt.Data;
using Tzkt.Data.Models;

namespace Tzkt.Data.Migrations
{
    [DbContext(typeof(TzktContext))]
    [Migration("20190916172004_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn)
                .HasAnnotation("ProductVersion", "3.0.0-rc1.19456.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            modelBuilder.Entity("Tzkt.Data.Models.ActivationOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccountId")
                        .HasColumnType("integer");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasColumnType("character(51)")
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .IsUnique();

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.ToTable("ActivationOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.AppState", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("Protocol")
                        .HasColumnType("text");

                    b.Property<bool>("Synced")
                        .HasColumnType("boolean");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.ToTable("AppState");

                    b.HasData(
                        new
                        {
                            Id = -1,
                            Hash = "",
                            Level = -1,
                            Protocol = "",
                            Synced = false,
                            Timestamp = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("Tzkt.Data.Models.BakingCycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("AccusationLostDeposit")
                        .HasColumnType("bigint");

                    b.Property<long>("AccusationLostFee")
                        .HasColumnType("bigint");

                    b.Property<long>("AccusationLostReward")
                        .HasColumnType("bigint");

                    b.Property<long>("AccusationReward")
                        .HasColumnType("bigint");

                    b.Property<int>("BakerId")
                        .HasColumnType("integer");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<int>("Blocks")
                        .HasColumnType("integer");

                    b.Property<int>("BlocksExtra")
                        .HasColumnType("integer");

                    b.Property<int>("BlocksMissed")
                        .HasColumnType("integer");

                    b.Property<long>("BlocksReward")
                        .HasColumnType("bigint");

                    b.Property<int>("Cycle")
                        .HasColumnType("integer");

                    b.Property<int>("Endorsements")
                        .HasColumnType("integer");

                    b.Property<int>("EndorsementsMissed")
                        .HasColumnType("integer");

                    b.Property<long>("EndorsementsReward")
                        .HasColumnType("bigint");

                    b.Property<long>("FeesReward")
                        .HasColumnType("bigint");

                    b.Property<long>("RevelationLostFee")
                        .HasColumnType("bigint");

                    b.Property<long>("RevelationLostReward")
                        .HasColumnType("bigint");

                    b.Property<long>("RevelationReward")
                        .HasColumnType("bigint");

                    b.Property<long>("StakingBalance")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("BakerId");

                    b.ToTable("BakerCycles");
                });

            modelBuilder.Entity("Tzkt.Data.Models.BakingRight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BakerId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BakerId");

                    b.ToTable("BakingRights");
                });

            modelBuilder.Entity("Tzkt.Data.Models.BalanceSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AddressId")
                        .HasColumnType("integer");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<int>("DelegateId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("BalanceSnapshots");
                });

            modelBuilder.Entity("Tzkt.Data.Models.BallotOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasColumnType("character(51)")
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<int>("PeriodId")
                        .HasColumnType("integer");

                    b.Property<int>("ProposalId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Vote")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ProposalId");

                    b.HasIndex("SenderId");

                    b.ToTable("BallotOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.BaseAddress", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<int?>("DelegateId")
                        .HasColumnType("integer");

                    b.Property<int>("Operations")
                        .HasColumnType("integer");

                    b.Property<bool>("Staked")
                        .HasColumnType("boolean");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("Address");

                    b.HasIndex("Address")
                        .IsUnique();

                    b.HasIndex("DelegateId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Staked");

                    b.ToTable("Addresses");

                    b.HasDiscriminator<int>("Type");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Block", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("BakerId")
                        .HasColumnType("integer");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasColumnType("character(51)")
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("Operations")
                        .HasColumnType("integer");

                    b.Property<int>("OperationsMask")
                        .HasColumnType("integer");

                    b.Property<int>("Priority")
                        .HasColumnType("integer");

                    b.Property<int>("ProtocolId")
                        .HasColumnType("integer");

                    b.Property<int?>("RevelationId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int>("Validations")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BakerId");

                    b.HasIndex("Hash")
                        .IsUnique();

                    b.HasIndex("Level")
                        .IsUnique();

                    b.HasIndex("ProtocolId");

                    b.HasIndex("RevelationId")
                        .IsUnique();

                    b.ToTable("Blocks");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Cycle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("ActiveBakers")
                        .HasColumnType("integer");

                    b.Property<int>("ActiveDelegators")
                        .HasColumnType("integer");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<int>("Snapshot")
                        .HasColumnType("integer");

                    b.Property<long>("TotalBalances")
                        .HasColumnType("bigint");

                    b.Property<int>("TotalRolls")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Cycles");
                });

            modelBuilder.Entity("Tzkt.Data.Models.DelegationOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<int?>("DelegateId")
                        .HasColumnType("integer");

                    b.Property<long>("Fee")
                        .HasColumnType("bigint");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int?>("Nonce")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasColumnType("character(51)")
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DelegateId");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("ParentId");

                    b.HasIndex("SenderId");

                    b.ToTable("DelegationOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.DelegatorSnapshot", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BakerId")
                        .HasColumnType("integer");

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<int>("Cycle")
                        .HasColumnType("integer");

                    b.Property<int>("DelegatorId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BakerId");

                    b.HasIndex("DelegatorId");

                    b.ToTable("DelegatorSnapshots");
                });

            modelBuilder.Entity("Tzkt.Data.Models.DoubleBakingOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccusedLevel")
                        .HasColumnType("integer");

                    b.Property<int>("AccuserId")
                        .HasColumnType("integer");

                    b.Property<long>("AccuserReward")
                        .HasColumnType("bigint");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("OffenderId")
                        .HasColumnType("integer");

                    b.Property<long>("OffenderLoss")
                        .HasColumnType("bigint");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasColumnType("character(51)")
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccuserId");

                    b.HasIndex("Level");

                    b.HasIndex("OffenderId");

                    b.HasIndex("OpHash");

                    b.ToTable("DoubleBakingOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.DoubleEndorsingOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("AccusedLevel")
                        .HasColumnType("integer");

                    b.Property<int>("AccuserId")
                        .HasColumnType("integer");

                    b.Property<long>("AccuserReward")
                        .HasColumnType("bigint");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("OffenderId")
                        .HasColumnType("integer");

                    b.Property<long>("OffenderLoss")
                        .HasColumnType("bigint");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasColumnType("character(51)")
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("AccuserId");

                    b.HasIndex("Level");

                    b.HasIndex("OffenderId");

                    b.HasIndex("OpHash");

                    b.ToTable("DoubleEndorsingOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.EndorsementOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("DelegateId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasColumnType("character(51)")
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<long>("Reward")
                        .HasColumnType("bigint");

                    b.Property<int>("Slots")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("DelegateId");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.ToTable("EndorsementOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.EndorsingRight", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BakerId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("Slots")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("BakerId");

                    b.ToTable("EndorsingRights");
                });

            modelBuilder.Entity("Tzkt.Data.Models.NonceRevelationOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("BakerId")
                        .HasColumnType("integer");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasColumnType("character(51)")
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<int>("RevelationLevel")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("BakerId");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("RevelationLevel");

                    b.ToTable("NonceRevelationOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.OriginationOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Balance")
                        .HasColumnType("bigint");

                    b.Property<int>("ContractId")
                        .HasColumnType("integer");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<bool>("Delegatable")
                        .HasColumnType("boolean");

                    b.Property<int?>("DelegateId")
                        .HasColumnType("integer");

                    b.Property<long>("Fee")
                        .HasColumnType("bigint");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("ManagerId")
                        .HasColumnType("integer");

                    b.Property<int?>("Nonce")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasColumnType("character(51)")
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<bool>("Spendable")
                        .HasColumnType("boolean");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("ContractId")
                        .IsUnique();

                    b.HasIndex("DelegateId");

                    b.HasIndex("Level");

                    b.HasIndex("ManagerId");

                    b.HasIndex("OpHash");

                    b.HasIndex("ParentId");

                    b.HasIndex("SenderId");

                    b.ToTable("OriginationOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Proposal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int?>("ExplorationPeriodId")
                        .HasColumnType("integer");

                    b.Property<string>("Hash")
                        .HasColumnType("character(51)")
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<int>("InitiatorId")
                        .HasColumnType("integer");

                    b.Property<int?>("PromotionPeriodId")
                        .HasColumnType("integer");

                    b.Property<int>("ProposalPeriodId")
                        .HasColumnType("integer");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.Property<int?>("TestingPeriodId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ExplorationPeriodId")
                        .IsUnique();

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("InitiatorId");

                    b.HasIndex("PromotionPeriodId")
                        .IsUnique();

                    b.HasIndex("ProposalPeriodId");

                    b.HasIndex("TestingPeriodId")
                        .IsUnique();

                    b.ToTable("Proposals");
                });

            modelBuilder.Entity("Tzkt.Data.Models.ProposalOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasColumnType("character(51)")
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<int>("PeriodId")
                        .HasColumnType("integer");

                    b.Property<int>("ProposalId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("PeriodId");

                    b.HasIndex("ProposalId");

                    b.HasIndex("SenderId");

                    b.ToTable("ProposalOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Protocol", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Hash")
                        .HasColumnType("text");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("Protocols");
                });

            modelBuilder.Entity("Tzkt.Data.Models.RevealOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<long>("Fee")
                        .HasColumnType("bigint");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int?>("Nonce")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasColumnType("character(51)")
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<string>("PublicKey")
                        .IsRequired()
                        .HasColumnType("character varying(65)")
                        .HasMaxLength(65);

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("ParentId");

                    b.HasIndex("SenderId");

                    b.ToTable("RevealOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.TransactionOperation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<int>("Counter")
                        .HasColumnType("integer");

                    b.Property<long>("Fee")
                        .HasColumnType("bigint");

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int?>("Nonce")
                        .HasColumnType("integer");

                    b.Property<string>("OpHash")
                        .IsRequired()
                        .HasColumnType("character(51)")
                        .IsFixedLength(true)
                        .HasMaxLength(51);

                    b.Property<int?>("ParentId")
                        .HasColumnType("integer");

                    b.Property<int>("SenderId")
                        .HasColumnType("integer");

                    b.Property<byte>("Status")
                        .HasColumnType("smallint");

                    b.Property<long>("StorageFee")
                        .HasColumnType("bigint");

                    b.Property<bool>("TargetAllocated")
                        .HasColumnType("boolean");

                    b.Property<int>("TargetId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("Level");

                    b.HasIndex("OpHash");

                    b.HasIndex("ParentId");

                    b.HasIndex("SenderId");

                    b.HasIndex("TargetId");

                    b.ToTable("TransactionOps");
                });

            modelBuilder.Entity("Tzkt.Data.Models.VotingEpoch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("Level")
                        .HasColumnType("integer");

                    b.Property<int>("Progress")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("VotingEpoches");
                });

            modelBuilder.Entity("Tzkt.Data.Models.VotingPeriod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<int>("EndLevel")
                        .HasColumnType("integer");

                    b.Property<int>("EpochId")
                        .HasColumnType("integer");

                    b.Property<int>("Kind")
                        .HasColumnType("integer");

                    b.Property<int>("StartLevel")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("EpochId");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("VotingPeriods");

                    b.HasDiscriminator<int>("Kind");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Account", b =>
                {
                    b.HasBaseType("Tzkt.Data.Models.BaseAddress");

                    b.Property<long>("Counter")
                        .HasColumnType("bigint");

                    b.Property<string>("PublicKey")
                        .HasColumnType("character varying(65)")
                        .HasMaxLength(65);

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Tzkt.Data.Models.Contract", b =>
                {
                    b.HasBaseType("Tzkt.Data.Models.BaseAddress");

                    b.Property<bool>("Delegatable")
                        .HasColumnType("boolean");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("integer");

                    b.Property<int?>("OriginatorId")
                        .HasColumnType("integer");

                    b.Property<bool>("Spendable")
                        .HasColumnType("boolean");

                    b.HasIndex("ManagerId");

                    b.HasIndex("OriginatorId");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Tzkt.Data.Models.ExplorationPeriod", b =>
                {
                    b.HasBaseType("Tzkt.Data.Models.VotingPeriod");

                    b.Property<int>("Abstainings")
                        .HasColumnType("integer");

                    b.Property<int>("Approvals")
                        .HasColumnType("integer");

                    b.Property<int>("Participation")
                        .HasColumnType("integer");

                    b.Property<int>("ProposalId")
                        .HasColumnType("integer");

                    b.Property<int>("Quorum")
                        .HasColumnType("integer");

                    b.Property<int>("Refusals")
                        .HasColumnType("integer");

                    b.Property<int>("TotalStake")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Tzkt.Data.Models.PromotionPeriod", b =>
                {
                    b.HasBaseType("Tzkt.Data.Models.VotingPeriod");

                    b.Property<int>("Abstainings")
                        .HasColumnName("PromotionPeriod_Abstainings")
                        .HasColumnType("integer");

                    b.Property<int>("Approvals")
                        .HasColumnName("PromotionPeriod_Approvals")
                        .HasColumnType("integer");

                    b.Property<int>("Participation")
                        .HasColumnName("PromotionPeriod_Participation")
                        .HasColumnType("integer");

                    b.Property<int>("ProposalId")
                        .HasColumnName("PromotionPeriod_ProposalId")
                        .HasColumnType("integer");

                    b.Property<int>("Quorum")
                        .HasColumnName("PromotionPeriod_Quorum")
                        .HasColumnType("integer");

                    b.Property<int>("Refusals")
                        .HasColumnName("PromotionPeriod_Refusals")
                        .HasColumnType("integer");

                    b.Property<int>("TotalStake")
                        .HasColumnName("PromotionPeriod_TotalStake")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue(3);
                });

            modelBuilder.Entity("Tzkt.Data.Models.ProposalPeriod", b =>
                {
                    b.HasBaseType("Tzkt.Data.Models.VotingPeriod");

                    b.HasDiscriminator().HasValue(0);
                });

            modelBuilder.Entity("Tzkt.Data.Models.TestingPeriod", b =>
                {
                    b.HasBaseType("Tzkt.Data.Models.VotingPeriod");

                    b.Property<int>("ProposalId")
                        .HasColumnName("TestingPeriod_ProposalId")
                        .HasColumnType("integer");

                    b.HasDiscriminator().HasValue(2);
                });

            modelBuilder.Entity("Tzkt.Data.Models.Delegate", b =>
                {
                    b.HasBaseType("Tzkt.Data.Models.Account");

                    b.Property<int>("ActivationLevel")
                        .HasColumnType("integer");

                    b.Property<int?>("DeactivationLevel")
                        .HasColumnType("integer");

                    b.Property<int>("Delegators")
                        .HasColumnType("integer");

                    b.Property<long>("FrozenDeposits")
                        .HasColumnType("bigint");

                    b.Property<long>("FrozenFees")
                        .HasColumnType("bigint");

                    b.Property<long>("FrozenRewards")
                        .HasColumnType("bigint");

                    b.Property<long>("StakingBalance")
                        .HasColumnType("bigint");

                    b.HasIndex("ActivationLevel");

                    b.HasIndex("DeactivationLevel");

                    b.HasDiscriminator().HasValue(1);
                });

            modelBuilder.Entity("Tzkt.Data.Models.ActivationOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Account", "Account")
                        .WithOne("Activation")
                        .HasForeignKey("Tzkt.Data.Models.ActivationOperation", "AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Activations")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tzkt.Data.Models.BakingCycle", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Delegate", "Baker")
                        .WithMany("BakingCycles")
                        .HasForeignKey("BakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tzkt.Data.Models.BakingRight", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Delegate", "Baker")
                        .WithMany("BakingRights")
                        .HasForeignKey("BakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tzkt.Data.Models.BallotOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Ballots")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.VotingPeriod", "Period")
                        .WithMany("Ballots")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Proposal", "Proposal")
                        .WithMany("Ballots")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Delegate", "Sender")
                        .WithMany("Ballots")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tzkt.Data.Models.BaseAddress", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Delegate", "Delegate")
                        .WithMany("DelegatedAddresses")
                        .HasForeignKey("DelegateId");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Block", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Delegate", "Baker")
                        .WithMany("BakedBlocks")
                        .HasForeignKey("BakerId");

                    b.HasOne("Tzkt.Data.Models.Protocol", "Protocol")
                        .WithMany("Blocks")
                        .HasForeignKey("ProtocolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.NonceRevelationOperation", "Revelation")
                        .WithOne("RevelationBlock")
                        .HasForeignKey("Tzkt.Data.Models.Block", "RevelationId")
                        .HasPrincipalKey("Tzkt.Data.Models.NonceRevelationOperation", "RevelationLevel");
                });

            modelBuilder.Entity("Tzkt.Data.Models.DelegationOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Delegate", "Delegate")
                        .WithMany("ReceivedDelegations")
                        .HasForeignKey("DelegateId");

                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Delegations")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.TransactionOperation", "Parent")
                        .WithMany("InternalDelegations")
                        .HasForeignKey("ParentId");

                    b.HasOne("Tzkt.Data.Models.BaseAddress", "Sender")
                        .WithMany("SentDelegations")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tzkt.Data.Models.DelegatorSnapshot", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Delegate", "Baker")
                        .WithMany("DelegatorsSnapshots")
                        .HasForeignKey("BakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.BaseAddress", "Delegator")
                        .WithMany("BalanceSnapshots")
                        .HasForeignKey("DelegatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tzkt.Data.Models.DoubleBakingOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Delegate", "Accuser")
                        .WithMany("SentDoubleBakingAccusations")
                        .HasForeignKey("AccuserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("DoubleBakings")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Delegate", "Offender")
                        .WithMany("ReceivedDoubleBakingAccusations")
                        .HasForeignKey("OffenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tzkt.Data.Models.DoubleEndorsingOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Delegate", "Accuser")
                        .WithMany("SentDoubleEndorsingAccusations")
                        .HasForeignKey("AccuserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("DoubleEndorsings")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Delegate", "Offender")
                        .WithMany("ReceivedDoubleEndorsingAccusations")
                        .HasForeignKey("OffenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tzkt.Data.Models.EndorsementOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Delegate", "Delegate")
                        .WithMany("Endorsements")
                        .HasForeignKey("DelegateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Endorsements")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tzkt.Data.Models.EndorsingRight", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Delegate", "Baker")
                        .WithMany("EndorsingRights")
                        .HasForeignKey("BakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tzkt.Data.Models.NonceRevelationOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Delegate", "Baker")
                        .WithMany("Revelations")
                        .HasForeignKey("BakerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Revelations")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tzkt.Data.Models.OriginationOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Contract", "Contract")
                        .WithOne("Origination")
                        .HasForeignKey("Tzkt.Data.Models.OriginationOperation", "ContractId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Delegate", "Delegate")
                        .WithMany("DelegatedOriginations")
                        .HasForeignKey("DelegateId");

                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Originations")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Account", "Manager")
                        .WithMany("ManagedOriginations")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.TransactionOperation", "Parent")
                        .WithMany("InternalOriginations")
                        .HasForeignKey("ParentId");

                    b.HasOne("Tzkt.Data.Models.BaseAddress", "Sender")
                        .WithMany("SentOriginations")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tzkt.Data.Models.Proposal", b =>
                {
                    b.HasOne("Tzkt.Data.Models.ExplorationPeriod", "ExplorationPeriod")
                        .WithOne("Proposal")
                        .HasForeignKey("Tzkt.Data.Models.Proposal", "ExplorationPeriodId");

                    b.HasOne("Tzkt.Data.Models.Delegate", "Initiator")
                        .WithMany("PushedProposals")
                        .HasForeignKey("InitiatorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.PromotionPeriod", "PromotionPeriod")
                        .WithOne("Proposal")
                        .HasForeignKey("Tzkt.Data.Models.Proposal", "PromotionPeriodId");

                    b.HasOne("Tzkt.Data.Models.ProposalPeriod", "ProposalPeriod")
                        .WithMany("Candidates")
                        .HasForeignKey("ProposalPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.TestingPeriod", "TestingPeriod")
                        .WithOne("Proposal")
                        .HasForeignKey("Tzkt.Data.Models.Proposal", "TestingPeriodId");
                });

            modelBuilder.Entity("Tzkt.Data.Models.ProposalOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Proposals")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.VotingPeriod", "Period")
                        .WithMany("Proposals")
                        .HasForeignKey("PeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Proposal", "Proposal")
                        .WithMany("Proposals")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Delegate", "Sender")
                        .WithMany("Proposals")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tzkt.Data.Models.RevealOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Reveals")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.TransactionOperation", "Parent")
                        .WithMany("InternalReveals")
                        .HasForeignKey("ParentId");

                    b.HasOne("Tzkt.Data.Models.BaseAddress", "Sender")
                        .WithMany("Reveals")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tzkt.Data.Models.TransactionOperation", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Block", "Block")
                        .WithMany("Transactions")
                        .HasForeignKey("Level")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.TransactionOperation", "Parent")
                        .WithMany("InternalTransactions")
                        .HasForeignKey("ParentId");

                    b.HasOne("Tzkt.Data.Models.BaseAddress", "Sender")
                        .WithMany("SentTransactions")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.BaseAddress", "Target")
                        .WithMany("ReceivedTransactions")
                        .HasForeignKey("TargetId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tzkt.Data.Models.VotingPeriod", b =>
                {
                    b.HasOne("Tzkt.Data.Models.VotingEpoch", "Epoch")
                        .WithMany("Periods")
                        .HasForeignKey("EpochId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Tzkt.Data.Models.Contract", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Account", "Manager")
                        .WithMany("ManagedContracts")
                        .HasForeignKey("ManagerId");

                    b.HasOne("Tzkt.Data.Models.BaseAddress", "Originator")
                        .WithMany("OriginatedContracts")
                        .HasForeignKey("OriginatorId");
                });

            modelBuilder.Entity("Tzkt.Data.Models.Delegate", b =>
                {
                    b.HasOne("Tzkt.Data.Models.Block", "ActivationBlock")
                        .WithMany("ActivatedDelegates")
                        .HasForeignKey("ActivationLevel")
                        .HasPrincipalKey("Level")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Tzkt.Data.Models.Block", "DeactivationBlock")
                        .WithMany("DeactivatedDelegates")
                        .HasForeignKey("DeactivationLevel")
                        .HasPrincipalKey("Level");
                });
#pragma warning restore 612, 618
        }
    }
}
